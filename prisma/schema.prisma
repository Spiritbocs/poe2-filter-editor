// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  filters       Filter[]
  votes         Vote[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Filter {
  id          String     @id @default(cuid())
  name        String
  githubUrl   String     @db.Text
  description String?    @db.Text
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  downloads   Int        @default(0)
  votes       Vote[]
  tags        FilterTag[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
}

model Vote {
  id        String   @id @default(cuid())
  filterId  String
  userId    String
  value     Int      
  filter    Filter   @relation(fields: [filterId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([filterId, userId])
  @@index([filterId])
  @@index([userId])
}

model Tag {
  id          String      @id @default(cuid())
  name        String      @unique
  filters     FilterTag[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model FilterTag {
  filterId String
  tagId    String
  filter   Filter @relation(fields: [filterId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([filterId, tagId])
  @@index([filterId])
  @@index([tagId])
}